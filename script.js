const form = document.getElementById('promptForm');
const loading = document.getElementById('loading');
const resultSection = document.getElementById('resultSection');
const resultContent = document.getElementById('resultContent');
const generateBtn = document.getElementById('generateBtn');
const apiKeySelect = document.getElementById('apiKeySelect');
const customApiGroup = document.getElementById('customApiGroup');
const apiKey = document.getElementById('apiKey');
const apiStatus = document.getElementById('apiStatus');

// Handle API key selection
apiKeySelect.addEventListener('change', function() {
    if (this.value === 'custom') {
        customApiGroup.style.display = 'block';
        apiStatus.innerHTML = '<small style="color: #856404;">‚ö†Ô∏è Vui l√≤ng nh·∫≠p API Key ri√™ng c·ªßa b·∫°n</small>';
        apiStatus.className = 'api-status api-warning';
    } else if (this.value === '') {
        customApiGroup.style.display = 'none';
        apiStatus.innerHTML = '<small style="color: #721c24;">‚ùå Vui l√≤ng ch·ªçn API Key</small>';
        apiStatus.className = 'api-status api-error';
    } else {
        customApiGroup.style.display = 'none';
        apiStatus.innerHTML = '<small style="color: #28a745;">‚úÖ S·ª≠ d·ª•ng API Key demo - C√≥ th·ªÉ b·ªã gi·ªõi h·∫°n request</small>';
        apiStatus.className = 'api-status';
    }
});

function getSelectedApiKey() {
    if (apiKeySelect.value === 'custom') {
        return apiKey.value.trim();
    } else {
        return apiKeySelect.value;
    }
}

form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const selectedApiKey = getSelectedApiKey();
    if (!selectedApiKey) {
        alert('Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p API Key Gemini!');
        return;
    }

    const formData = {
        targetAudience: document.getElementById('targetAudience').value.trim(),
        videoDuration: document.getElementById('videoDuration').value,
        productName: document.getElementById('productName').value.trim(),
        customerProblem: document.getElementById('customerProblem').value.trim(),
        productBenefits: document.getElementById('productBenefits').value.trim(),
        voiceTone: document.getElementById('voiceTone').value,
        outputLanguage: document.getElementById('outputLanguage').value
    };

    // Validate form
    const requiredFields = Object.keys(formData);
    for (let field of requiredFields) {
        if (!formData[field]) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
            return;
        }
    }

    generateBtn.disabled = true;
    loading.style.display = 'block';
    resultSection.style.display = 'none';

    try {
        const prompt = createPrompt(formData);
        const result = await callGeminiAPI(selectedApiKey, prompt);
        
        resultContent.textContent = result;
        resultSection.style.display = 'block';
        resultSection.scrollIntoView({ behavior: 'smooth' });
        
    } catch (error) {
        console.error('Error:', error);
        showError('C√≥ l·ªói x·∫£y ra: ' + error.message);
    } finally {
        loading.style.display = 'none';
        generateBtn.disabled = false;
    }
});

function createPrompt(data) {
    const languageInstruction = data.outputLanguage === 'vietnamese' 
        ? 'B·∫°n ph·∫£i tr·∫£ l·ªùi HO√ÄN TO√ÄN b·∫±ng ti·∫øng Vi·ªát, bao g·ªìm c·∫£ prompt v√† t·∫•t c·∫£ n·ªôi dung.'
        : 'You must respond in English, but keep Vietnamese product names if provided.';

    return `${languageInstruction}

B·∫°n l√† m·ªôt chuy√™n gia s√°ng t·∫°o n·ªôi dung qu·∫£ng c√°o. H√£y t·∫°o m·ªôt prompt video qu·∫£ng c√°o chi ti·∫øt d·ª±a tr√™n th√¥ng tin sau:

- ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng: ${data.targetAudience}
- Th·ªùi l∆∞·ª£ng video: ${data.videoDuration} gi√¢y
- T√™n s·∫£n ph·∫©m/d·ªãch v·ª•: ${data.productName}
- V·∫•n ƒë·ªÅ kh√°ch h√†ng: ${data.customerProblem}
- L·ª£i √≠ch s·∫£n ph·∫©m: ${data.productBenefits}
- T√¥ng gi·ªçng voice: ${data.voiceTone}

H√£y t·∫°o ra:
1. **Prompt t·∫°o video AI ho√†n ch·ªânh** - chia th√†nh t·ª´ng c·∫£nh c·ª• th·ªÉ v·ªõi th·ªùi gian
2. **Script l·ªùi tho·∫°i** ph√π h·ª£p v·ªõi t√¥ng gi·ªçng y√™u c·∫ßu
3. **M√¥ t·∫£ visual** cho t·ª´ng c·∫£nh

Format nh∆∞ sau:
üëâ **Prompt t·∫°o video AI:**
[M√¥ t·∫£ t·ªïng quan]
- C·∫£nh 1 (Xs): [M√¥ t·∫£ chi ti·∫øt]
- C·∫£nh 2 (Xs): [M√¥ t·∫£ chi ti·∫øt]  
- C·∫£nh 3 (Xs): [M√¥ t·∫£ chi ti·∫øt]

**Voice ${data.voiceTone}:** "[Script l·ªùi tho·∫°i ho√†n ch·ªânh]"

H√£y l√†m cho prompt n√†y th·∫≠t chi ti·∫øt v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë∆∞·ª£c cho c√°c AI t·∫°o video nh∆∞ Runway, Sora, Google Veo.`;
}

async function callGeminiAPI(apiKey, prompt) {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`;
    
    const requestBody = {
        contents: [{
            parts: [{
                text: prompt
            }]
        }],
        generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
        }
    };

    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ API');
    }

    return data.candidates[0].content.parts[0].text;
}

function showError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error';
    errorDiv.textContent = message;
    
    // Remove existing error messages
    const existingErrors = document.querySelectorAll('.error');
    existingErrors.forEach(error => error.remove());
    
    // Add new error message
    loading.parentNode.insertBefore(errorDiv, loading.nextSibling);
}

function copyResult() {
    const text = resultContent.textContent;
    navigator.clipboard.writeText(text).then(() => {
        const copyBtn = event.target;
        const originalText = copyBtn.textContent;
        copyBtn.textContent = '‚úÖ ƒê√£ sao ch√©p!';
        copyBtn.style.background = '#28a745';
        
        setTimeout(() => {
            copyBtn.textContent = originalText;
            copyBtn.style.background = '#28a745';
        }, 2000);
    }).catch(err => {
        console.error('Kh√¥ng th·ªÉ sao ch√©p:', err);
        alert('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng copy th·ªß c√¥ng.');
    });
}

// Auto-save API key selection
const savedApiSelection = localStorage.getItem('gemini_api_selection');
const savedCustomApiKey = localStorage.getItem('gemini_custom_api_key');

if (savedApiSelection) {
    apiKeySelect.value = savedApiSelection;
    if (savedApiSelection === 'custom' && savedCustomApiKey) {
        apiKey.value = savedCustomApiKey;
        customApiGroup.style.display = 'block';
        apiStatus.innerHTML = '<small style="color: #856404;">‚ö†Ô∏è S·ª≠ d·ª•ng API Key ri√™ng ƒë√£ l∆∞u</small>';
        apiStatus.className = 'api-status api-warning';
    } else if (savedApiSelection !== '' && savedApiSelection !== 'custom') {
        apiStatus.innerHTML = '<small style="color: #28a745;">‚úÖ S·ª≠ d·ª•ng API Key demo - C√≥ th·ªÉ b·ªã gi·ªõi h·∫°n request</small>';
        apiStatus.className = 'api-status';
    }
}

// Save API selection when changed
apiKeySelect.addEventListener('change', () => {
    localStorage.setItem('gemini_api_selection', apiKeySelect.value);
});

// Save custom API key when changed
apiKey.addEventListener('change', () => {
    if (apiKey.value.trim()) {
        localStorage.setItem('gemini_custom_api_key', apiKey.value.trim());
    }
});